;;; ~/.doom.d/lisp/brust-mu4e.el -*- lexical-binding: t; -*-


* Basic
#+BEGIN_SRC elisp
  (setq ;; mu4e-get-mail-command "mbsync -Va"
        ;; Enable notifications
        ;; If you want to exclude your own e-mail address when “replying to all”
        mu4e-compose-dont-reply-to-self t
        ;; save attachment to my Downloads (this can also be a function)
        mu4e-attachment-dir (expand-file-name "~/Downloads/")
        ;; enable inline images
        mu4e-maildir (expand-file-name "~/Maildir")
        mu4e-mu-binary (expand-file-name "~/src/mu/mu/mu")
        ;; mu4e-mu-home
        ;; mu4e-html2text-command "w3m -dump -T text/html -cols 72 -o display_link_number=true -o auto_image=false -o display_image=false -o ignore_null_img_alt=true"
        ;; mu4e-html2text-command "w3m -T text/html"
        ;; alternatively "textutil -stdin -format html -convert txt -stdout"
        ;; mu4e-show-images t
        mu4e-user-mail-address-list `(,user-mail-address
                                      "brust@mat.uab.cat"
                                      "brust@math.ku.dk"
                                      )
        ;; customize the reply-quote-string
        ;; message-citation-line-format "On %a %d %b %Y at %R, %f wrote:\n"
        ;; choose to use the formatted string
        ;; message-citation-line-function 'message-insert-formatted-citation-line
        ;; message-send-mail-function 'message-send-mail-with-sendmail
        ;; message-sendmail-extra-arguments '("--read-envelope-from")
        ;; mu4e-index-update-in-background t
        ;; to speed-up indexing
        ;; u4e-index-cleanup nil      ;; don't do a full cleanup check
        ;; u4e-index-lazy-check t     ;; don't consider up-to-dated dirs
        ;; Split windows vertically
        mu4e-split-view 'vertical
        )
#+END_SRC

#+RESULTS:
: mu4e-view-pipe

* Handy hooks
#+begin_src elisp
(defun brust-mu4e-compose-mode-hook nil
  (flyspell-mode 1)
  ;; (auto-save-mode -1)
  (set-fill-column 72)
  ;; (brust-mu4e-add-headers)
  (message-add-header (concat "Date: " (message-make-date)))
  (message-add-header (concat "Message-ID: " (message-make-message-id)))
  (message-insert-headers)
  ;; (message-hide-headers)
  ;; This does not work, since while creating buffer mu4e-compose-type is set to nil.
  ;; (if (eq mu4e-compose-type 'new)
  ;;     (message-goto-to)
  ;;   (message-goto-body))
  )

;; (defun mu4e-compose-new nil
;;   "Start writing a new message."
;;   (interactive)
;;   (mu4e-compose 'new)
;;   (message-goto-to))
;;
;; (defun mu4e-compose-edit nil
;;   "Edit the draft message at point in the headers buffer.
;; This is only possible if the message at point is, in fact, a
;; draft message."
;;   (interactive)
;;   (mu4e-compose 'edit)
;;   (message-sort-headers)
;;   (message-goto-body))

(defadvice mu4e-compose (after move-to-right-place activate)
  (if (eq compose-type 'new)
      (message-goto-to)
    ;; (message-sort-headers)
    (message-goto-body)))

;; (add-hook 'mu4e-view-mode-hook #'mu4e-view-fill-long-lines)
(add-hook 'mu4e-view-mode-hook #'visual-line-mode)
(add-hook 'mu4e-compose-mode-hook #'brust-mu4e-compose-mode-hook)

;; From Ben Maughan: Get some Org functionality in compose buffer
;; (add-hook 'message-mode-hook 'turn-on-orgtbl)
;; (add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+end_src

#+RESULTS:
| brust-mu4e-compose-mode-hook | org-mu4e-compose-org-mode | flyspell-mode |
* Dealing with drafts
#+begin_src elisp
(defun brust-mu4e-add-draft-headers nil
  "Add headers on composing an email"
  (message-add-header "Flags: draft")
  ;; (message-add-header (concat "X-Mailer: mu4e " mu4e-mu-version "; emacs " emacs-version "\n"))
  (message-add-header (concat "Maildir: " mu4e-drafts-folder)))

(defun brust-mu4e-delete-draft-headers nil
  "Remove headers on composing an email"
  (message-cleanup-headers)
  (message-remove-header "Flags")
  (message-remove-header "Maildir"))


(defadvice message-dont-send (before add-draft-headers activate)
  (brust-mu4e-add-draft-headers))

(add-hook 'message-send-hook #'brust-mu4e-delete-draft-headers)
#+end_src

#+RESULTS:
| brust-mu4e-delete-draft-headers |
* Actions
#+begin_src elisp
(defun brust-mu4e-search-for-sender (msg)
  "Search for messages sent by the sender of the message at point."
  (mu4e-headers-search
   (concat "from:" (cdar (mu4e-message-field msg :from)))))

(setq mu4e-view-actions
      (append mu4e-view-actions
              (list
               ;; define 'x' as the shortcut
               (cons "xsearch for sender" 'brust-mu4e-search-for-sender)
               ;; Difine 'V' as the shortcut
               (cons "ViewInBrowser" 'mu4e-action-view-in-browser)
               ;; Store an org link to insert later
               (cons "lStore Link" 'org-store-link))))
#+end_src

* Main Menu
 Hack to edit main menu
#+begin_src elisp
(defun brust-mu4e-rebuild-index nil
  (interactive)
  (mu4e~proc-kill)
  (sit-for 0) ;; to efectively kill the proces
  (let ((display-buffer-alist (cons t 'display-buffer-no-window))) ;; to not display the buffer
    (async-shell-command "~/scr/mu/mu/mu index --rebuild" nil)))

(defun brust-mu4e-full-index nil
  (interactive)
  (let ((mu4e-index-cleanup t)      ;; don't do a full cleanup check
        (mu4e-index-lazy-check nil)) ;; don't consider up-to-dated dirs
    (mu4e-update-mail-and-index nil)))

;; (setq mu4e-headers-actions
;;       (append mu4e-headers-actions
;;               (list
;;                ;; Rebuild the whole date base
;;                (cons "Rebuild" 'brust-mu4e-rebuild-index))))

(define-key mu4e-main-mode-map (kbd "R") #'brust-mu4e-rebuild-index)
(define-key mu4e-main-mode-map (kbd "F") #'brust-mu4e-full-index)
(define-key mu4e-main-mode-map (kbd "m") #'brust-inbox-update-mode-line-string)

(defadvice mu4e~main-view (after add-my-keys activate)
  (read-only-mode -1)
  (goto-char (point-max))
  (insert
   "\n\n"
   (propertize "  Mines [Hard adviced]\n\n" 'face 'mu4e-title-face)
   (mu4e~main-action-str "\t* [R]ebuild index\n" 'brust-mu4e-rebuild-index)
   (mu4e~main-action-str "\t* [F]ull index\n" 'brust-mu4e-full-index)
   (mu4e~main-action-str "\t* [m]ode line stirng\n" 'brust-inbox-update-mode-line-string))
  (read-only-mode 1)
  (goto-char (point-min)))
#+end_src

#+RESULTS:
: mu4e~main-view
* Marks
#+begin_src elisp
;; As another example, suppose we would like to “archive and mark read”
;; a message (GMail-style), then we can run the following code (after loading mu4e):

;; (add-to-list 'mu4e-marks
;;              '(archive
;;                :char       "A"
;;                :prompt     "Archive"
;;                :show-target (lambda (target) "archive")
;;                :action      (lambda (docid msg target)
;;                               ;; must come before proc-move since retag runs
;;                               ;; 'sed' on the file
;;                               (mu4e-action-retag-message msg "-\\Inbox")
;;                               (mu4e~proc-move docid nil "+S-u-N"))))

;; (defvar brust-mu4e-tags-list '() "List of tags to consistently tag my emails. List created from the file `brust-mu4e-tags-list-file`")

(defun brust-list-file-by-lines (-file)
  (with-temp-buffer
    (insert-file-contents -file)
    (split-string (buffer-string) "\n")))

(add-to-list 'mu4e-marks
             '(tag
               :char       "g"
               :prompt     "gtag"
               :ask-target (lambda () (ivy-read "What tag do you want to add? " (brust-list-file-by-lines "~/.emacs.d/brust-mu4e-tags-list-file.txt")
                                                :action (lambda (-str) (unless (member -str (brust-list-file-by-lines "~/.emacs.d/brust-mu4e-tags-list-file.txt"))
                                                                         (with-temp-buffer
                                                                           (insert-file-contents "~/.emacs.d/brust-mu4e-tags-list-file.txt")
                                                                           (insert -str "\n")
                                                                           (write-file "~/.emacs.d/brust-mu4e-tags-list-file.txt"))))))
               :show-target (lambda (target) (concat "Tag added " target))
               :action (lambda (docid msg target)
                         (mu4e-action-retag-message msg (concat "+" target)))))

(defvar brust-mu4e-main-dirs-UAB
  (list (cons "today" "/mathuab/Today")
        (cons "week" "/mathuab/This week")
        (cons "month" "/mathuab/This month")
        (cons "for your information" "/mathuab/FYI")))

(defun brust-flip-cons-list (-list)
  (cl-loop for -el in -list
           collect (cons (cdr -el) (car -el))))

(add-to-list 'mu4e-marks
             '(moveUAB
               :char       "A"
               :prompt     "MoveUAB"
               :ask-target (lambda () (mu4e-read-option "Move message to folder: " brust-mu4e-main-dirs))
               :show-target (lambda (target) (concat "move to " (cdr (assoc target (brust-flip-cons-list brust-mu4e-main-dirs-UAB)))))
               :action (lambda (docid msg target)
                         (mu4e-mark-set 'move target)
                         (when mu4e-headers-advance-after-mark (mu4e-headers-next)))))

(add-to-list 'mu4e-marks
             '(mydelete
               :char       "d"
               :prompt     "mydelete"
               :ask-target (lambda () (mu4e-read-option "Move message to folder: " brust-mu4e-main-dirs))
               :show-target (lambda (target) (concat "move to " (cdr (assoc target (brust-flip-cons-list brust-mu4e-main-dirs-UAB)))))
               :action (lambda (docid msg target)
                         (mu4e-mark-set 'move target)
                         (when mu4e-headers-advance-after-mark (mu4e-headers-next)))))

(mu4e~headers-defun-mark-for tag)
(mu4e~headers-defun-mark-for moveUAB)
#+end_src

* Contexts

(lambda (msg)
  (when msg
    (mu4e-message-contact-field-matches
     msg '(:from :to :cc :bcc) "uab")))
#+BEGIN_SRC elisp
(setq mu4e-contexts
      (list
       (make-mu4e-context
        :name "ku"
        :enter-func (lambda () (mu4e-message "Entering context mathKU"))
        :leave-func (lambda () (mu4e-message "Leaving context mathKU"))
        :match-func (lambda (msg)
                      (when msg
                        (or (string-match-p "^/mathku" (mu4e-message-field msg :maildir))
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "ku[.]dk"))))
        :vars '((user-mail-address . "brust@math.ku.dk")
                (user-full-name . "Laura Brustenga i Moncusí")
                (mu4e-sent-folder . "/mathku/Sent")
                (mu4e-drafts-folder . "/mathku/Drafts")
                (mu4e-trash-folder . "/mathku/Trash")
                (mu4e-compose-signature . (concat
                                           "Laura Brustenga i Moncusí,\n"
                                           "Københavns Universitet,\n"
                                           "Institut for Matematiske Fag,\n"
                                           "MBIO."))
                (mu4e-compose-format-flowed . nil)
                (mu4e-maildir-shortcuts . (("/mathku/Deleted Items" . ?d)
                                           ("/mathku/FYI"           . ?f)
                                           ("/mathku/INBOX"         . ?i)
                                           ("/mathku/Month"         . ?m)
                                           ("/mathku/Sent Items"    . ?s)
                                           ("/mathku/Today"         . ?t)
                                           ("/mathku/Week"          . ?w)))))
       (make-mu4e-context
        :name "uab"
        :enter-func (lambda () (mu4e-message "Entering context brust@mat.uab.cat"))
        :leave-func (lambda () (mu4e-message "Leaving context brust@mat.uab.cat"))
        :match-func (lambda (msg)
                      (when msg
                        (or (string-match-p "^/mathuab" (mu4e-message-field msg :maildir))
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "uab"))))
        :vars '((user-mail-address . "brust@mat.uab.cat")
                (user-full-name . "Laura Brustenga i Moncusí")
                (mu4e-sent-folder . "/mathuab/Sent")
                (mu4e-drafts-folder . "/mathuab/Drafts")
                (mu4e-trash-folder . "/mathuab/Trash")
                (mu4e-compose-signature . nil)
                (mu4e-compose-format-flowed . nil)
                (mu4e-maildir-shortcuts . (("/mathuab/FYI"        . ?f)
                                           ("/mathuab/INBOX"      . ?i)
                                           ("/mathuab/Sent"       . ?s)
                                           ("/mathuab/This Month" . ?m)
                                           ("/mathuab/This week"  . ?w)
                                           ("/mathuab/Today"      . ?t)
                                           ("/mathuab/Trash"      . ?d)))))
       (make-mu4e-context
        :name "gmail"
        :enter-func (lambda () (mu4e-message "Entering context laurea987@gmail.com"))
        :leave-func (lambda () (mu4e-message "Leaving context laurea987@gmail.com"))
        :match-func (lambda (msg)
                      (when msg
                        (or (string-match-p "^/gmail" (mu4e-message-field msg :maildir))
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "gmail"))))
        :vars '((user-mail-address . "laurea987@gmail.com")
                (user-full-name . "Laura Brustenga")
                (mu4e-sent-folder . "/gmail/Sent")
                (mu4e-drafts-folder . "/gmail/Drafts")
                (mu4e-trash-folder . "/gmail/Trash")
                (mu4e-compose-signature . nil)
                (mu4e-compose-format-flowed . nil)))))
#+END_SRC

#+RESULTS:
* Bookmarks
#+BEGIN_SRC elisp
;; Update mail using 'U' in main view: Include a bookmark to open all of my inboxes
(setq mu4e-bookmarks
      `(;; ,(make-mu4e-bookmark
        ;;   :name "All Inboxes"
        ;;   :query "maildir:/mathuab/INBOX OR maildir:/Gmail/Inbox AND flag:unread AND NOT flag:trashed"
        ;;   :key ?i)
        ,(make-mu4e-bookmark
          :name "Math Inbox"
          :query "maildir:/mathuab/INBOX OR maildir:/mathku/INBOX AND NOT flag:trashed"
          :key ?i)
        ,(make-mu4e-bookmark
          :name "Math Today"
          :query "maildir:/mathuab/Today OR maildir:/mathku/Today AND NOT flag:trashed"
          :key ?t)
        ;; ,(make-mu4e-bookmark
        ;;   :name "Mathuab Week"
        ;;   :query "maildir:/mathuab/This week AND NOT flag:trashed"
        ;;   :key ?w)
        ;; ,(make-mu4e-bookmark
        ;;   :name "Mathuab Month"
        ;;   :query "maildir:/mathuab/This Month AND NOT flag:trashed"
        ;;   :key ?m)
        ;; ,(make-mu4e-bookmark
        ;;   :name "Mathuab FYI"
        ;;   :query "maildir:/mathuab/FYI AND NOT maildir:/mathuab/trash"
        ;;   :key ?m)
        ;; ("mime:image/*" "Messages with images" 112)
        ,(make-mu4e-bookmark
          :name "Drafts"
          :query "maildir:/mathuab/Drafts OR maildir:/mathku/Drafts OR flag:draft"
          :key ?d)))
  #+END_SRC
* Contacts
#+begin_src elisp

#+end_src
* COMMENT Mail directory shortcuts
#+begin_src elisp
(setq mu4e-maildir-shortcuts
      '(("/Gmail/INBOX"   . ?g)
        ("/mathuab/INBOX" . ?m)))
#+end_src
* Org mu4e
#+begin_src elisp
;;store org-mode links to messages
(require 'org-mu4e)
;;store link to message if in header view, not to header query
(setq org-mu4e-link-query-in-headers-mode nil)

(push '("e" "Todo email" entry (file+headline "~/Dropbox/Org/my.org" "Work")
        "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")
      org-capture-templates)
      #+end_src

* yasnippet for composing emails
From http://pragmaticemacs.com/category/mu4e/

#+begin_src elisp
;; function to return first name of email recipients used by yasnippet
;; inspired by http://blog.binchen.org/posts/how-to-use-yasnippets-to-produce-email-templates-in-emacs.html
(defun bjm/mu4e-get-names-for-yasnippet ()
  "Return comma separated string of names for an email"
  (interactive)
  (let ((email-name "") str email-string email-list email-name2 tmpname)
    (save-excursion
      (goto-char (point-min))
      ;; first line in email could be some hidden line containing NO to field
      (setq str (buffer-substring-no-properties (point-min) (point-max))))
    ;; take name from TO field - match series of names
    (when (string-match "^To: \"?\\(.+\\)" str)
      (setq email-string (match-string 1 str)))
    ;;split to list by comma
    (setq email-list (split-string email-string " *, *"))
    ;;loop over emails
    (dolist (tmpstr email-list)
      ;;get first word of email string
      (setq tmpname (car (split-string tmpstr " ")))
      ;;remove whitespace or ""
      (setq tmpname (replace-regexp-in-string "[ \"]" "" tmpname))
      ;;join to string
      (setq email-name
            (concat email-name ", " tmpname)))
    ;;remove initial comma
    (setq email-name (replace-regexp-in-string "^, " "" email-name))
    ;;see if we want to use the name in the FROM field get name in FROM field if available, but only if there is only
    ;;one name in TO field
    (if (< (length email-list) 2)
        (when (string-match "^On.+, \\([^ ,\n]+\\).+wrote:$" str)
          (progn
            (setq email-name2 (match-string 1 str))
            ;;prefer name in FROM field if TO field has "@"
            (when (string-match "@" email-name)
              (setq email-name email-name2))
            )))
    email-name))
#+end_src
#+RESULTS: : bjm/mu4e-get-names-for-yasnippet

* COMMENT Alert
It is alredy set by Domm
** Config
It works for notifications...
#+BEGIN_SRC elisp
(use-package mu4e-alert
  :ensure t
  :after mu4e)

;; (require 'mu4e-alert)
(setq mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND maildir:/mathuab/INBOX"
      mu4e-headers-skip-duplicates t)

;; Desktop notifications
(mu4e-alert-set-default-style 'libnotify)
;; (mu4e-alert-set-default-style 'notifier))

;; (setq mu4e-enable-mode-line t)
(mu4e-alert-enable-notifications)
;; (mu4e-alert-enable-mode-line-display)
(mu4e-alert-update-mail-count-modeline)

;; (setq mu4e-alert-notify-repeated-mails t)
(mu4e-alert-notify-unread-mail-async)


(add-hook 'emacs-startup-hook #'mu4e-alert-enable-notifications)
;; (add-hook 'emacs-startup-hook #'mu4e-alert-enable-mode-line-display)
(add-hook 'mu4e-index-updated-hook #'mu4e~headers-do-auto-update)
;; (add-hook 'mu4e-index-updated-hook #'mu4e-alert-update-mail-count-modeline)

;;   (defun gjstein-refresh-mu4e-alert-mode-line () (interactive)
;;     (mu4e~proc-kill) (mu4e-alert-enable-mode-line-display)
;;     (mu4e-alert-enable-notifications))
;;   (run-with-timer 0 60 #'gjstein-refresh-mu4e-alert-mode-line)

#+END_SRC
** COMMENT Formatter
#+begin_src elisp
(require 'ezimage)

(defun brust-mu4e-alert-mode-line-formatter (mail-count)
  "Default formatter used to get the string to be displayed in the mode-line.
 MAIL-COUNT is the count of mails for which the string is to displayed"
  (when (not (zerop mail-count))
    (concat " "
            (propertize
             "+"
             'display (when (display-graphic-p)
                        ezimage-mail)
             'face display-time-mail-face
             'help-echo (concat (if (= mail-count 1)
                                    "You have an unread email"
                                  (format "You have %s unread emails" mail-count))
                                "\nClick here to view "
                                (if (= mail-count 1) "it" "them"))
             'mouse-face 'mode-line-highlight
             'keymap '(mode-line keymap
                                 (mouse-1 . mu4e-alert-view-unread-mails)
                                 (mouse-2 . mu4e-alert-view-unread-mails)
                                 (mouse-3 . mu4e-alert-view-unread-mails)))
            (if (zerop mail-count)
                " "
              (format " [%d] " mail-count)))))

(setq mu4e-alert-modeline-formatter 'mu4e-alert-default-mode-line-formatter)
#+end_src

#+RESULTS:
: brust-mu4e-alert-default-mode-line-formatter
* COMMENT New Inbox
That's something that I understand, and I can use. (I've never understood mu4e-alert and I've been not able to use it...)
** Code
From https://gist.github.com/gl-sergei/1986989ad3c2024f8150
#+begin_src elisp
 ;;; inbox.el --- display inbox status information  -*- coding: utf-8 -*-

;; Copyright (C) 2014 Sergei Glushchenko.

;; Author: Sergei Glushchenko <gl.sergei@gmail.com>

;; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

(require 'ezimage)

(defgroup inbox nil
  "Display inbox status information."
  :prefix "inbox-"
  :group 'hardware)

(defcustom inbox-update-interval 60
  "Inbox update interval"
  :type 'integer
  :group 'inbox)

(defvar inbox-update-timer nil
  "Interval timer object.")

(defcustom inbox-count-command "echo -n $( mu find date:1w..now maildir:/INBOX flag:unread 2>/dev/null | wc -l )"
  "Command to retrieve count of emails in Inbox"
  :type 'string
  :group 'inbox)

(defvar inbox-mode-line-string nil
  "String to display in the mode line.")
(put 'inbox-mode-line-string 'risky-local-variable t)

(define-minor-mode display-inbox-mode
  "Toggle inbox status display in mode line (Display Inbox mode).
 With a prefix argument ARG, enable Display Inbox mode if ARG is
 positive, and disable it otherwise.  If called from Lisp, enable
 the mode if ARG is omitted or nil."
  :global t :group 'inbox
  (setq inbox-mode-line-string "")
  (or global-mode-string (setq global-mode-string '("")))
  (and inbox-update-timer (cancel-timer inbox-update-timer))
  (if (not display-inbox-mode)
      (setq global-mode-string
            (delq 'inbox-mode-line-string global-mode-string))
    (add-to-list 'global-mode-string 'inbox-mode-line-string t)
    (setq inbox-update-timer (run-at-time nil inbox-update-interval
                                          'inbox-update-handler))
    (inbox-update)))


;; (defun inbox-update () (interactive)
;;   (setq inbox-mode-line-string (let ((unread (shell-command-to-string inbox-count-command)))
  ;;           (propertize (if (string= "0" unread) "" "+") 'display ezimage-mail
;;            'help-echo (format "%s unread messages" unread)))) (force-mode-line-update))

(defun brust-inbox-update-index-mu4e nil
  "Fast update and index mu4e 'mathuab'"
  (let ((mu4e-hide-index-messages t)
        (mu4e-index-update-error-warning nil)
        (mu4e-compose-complete-addresses nil) ;; just check for mails
        (mu4e-index-cleanup nil)
        (mu4e-index-lazy-check t)
        (mu4e-get-mail-command "mbsync mathuab")) ;; just update math mails
    (mu4e-update-mail-and-index t)))

(defun brust-inbox-update-mode-line-string nil
  (interactive)
  (setq inbox-mode-line-string
        (let ((unread (string-to-number (shell-command-to-string inbox-count-command))))
          (if (zerop unread) " "
            (concat " "
                    (propertize
                     "+"
                     'display ezimage-mail
                     'face 'brust-vc-edited)
                    (propertize
                     (format " [%d]" unread)
                     'face 'brust-vc-edited
                     'help-echo (concat (if (= unread 1)
                                            "You have an unread email"
                                          (format "You have %s unread emails" unread))
                                        "\nClick here to view "
                                        (if (= unread 1) "it" "them"))
                     'mouse-face 'mode-line-highlight
                     'keymap '(mode-line keymap
                                         (mouse-1 . mu4e-alert-view-unread-mails)
                                         (mouse-2 . mu4e-alert-view-unread-mails)
                                         (mouse-3 . mu4e-alert-view-unread-mails)))
                    " "))))
  (force-mode-line-update))

(defun inbox-update nil
  (interactive)
  (brust-inbox-update-index-mu4e)
  (brust-inbox-update-mode-line-string))

(defun inbox-update-handler ()
  (inbox-update)
  (sit-for 0))
  #+end_src

#+RESULTS:
: inbox-update-handler

** Config
#+begin_src elisp
(setq inbox-count-command "echo -n $( ~/scr/mu/mu/mu find flag:unread AND maildir:/mathuab/INBOX 2>/dev/null | wc -l )"
      inbox-update-interval (* 30 60) ;; Every half an hour it is enough.
      inbox-update-timer (run-at-time nil inbox-update-interval
                                      'inbox-update-handler))
(inbox-update)
#+end_src

#+RESULTS:

