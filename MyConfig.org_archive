#    -*- mode: org -*-


* Init.el
** Programing
*** Julia
**** COMMENT LSP
     :PROPERTIES:
     :ARCHIVE_TIME: 2020-10-09 Fri 14:17
     :ARCHIVE_FILE: ~/.doom.d/MyConfig.org
     :ARCHIVE_OLPATH: init.el/Programming/Julia mode
     :ARCHIVE_CATEGORY: MyConfig
     :END:
   #+begin_src elisp
(setq lsp-julia-default-environment "~/.julia/environments/v1.5.2"
      lsp-julia-command (car (cdr (assoc 'master julia-repl-executable-records)))
      ;; If you would like to use your own installation of ~LanguageServer.jl~, put the
      ;; following in your personal ~config.el~.
      lsp-julia-package-dir nil
      lsp-print-io t
      julia-mode-enable-lsp t
      julia-mode-enable-ess nil)
   #+end_src

   #+RESULTS:

**** COMMENT ESS (julia interaction)
     :PROPERTIES:
     :ARCHIVE_TIME: 2020-10-09 Fri 14:17
     :ARCHIVE_FILE: ~/.doom.d/MyConfig.org
     :ARCHIVE_OLPATH: init.el/Programming/Julia mode
     :ARCHIVE_CATEGORY: MyConfig
     :END:
***** Load it
       - ob-julia.el does not work properly see [[https://stackoverflow.com/questions/52043705/emacs-org-babel-with-ob-julia-el-does-not-work-anymore-with-julia-v1-0][StackOverflow disscution]]
   #+begin_src elisp
;; (add-to-list 'auto-mode-alist '("\\.jl\\'" . ess-julia-mode)) ;; auto loads

(setq inferior-julia-program
      (concat "~/src/"
              (cl-loop for -dir in (directory-files "~/src")
                       if (string-match-p "julia" -dir) return -dir)
              "/bin/julia"))

(map! :map ess-mode-map
      "C-c C-c" #'ess-eval-region-or-line-and-step
      "C <RET>" #'ess-eval-region-or-function-or-paragraph-and-step)

(setq ;; comint-prompt-read-only t
 ess-history-directory "~/.doom.d/local/"
 ess-history-file ".julia_history")


(add-hook! 'ess-julia-mode-hook (set-input-method "TeX"))
;; (add-hook 'comint-mode-hook #'brust-math-software-hookfun-to-intangify-prompt)
   #+end_src

   #+RESULTS:

***** Turn on latexsubs
   This needs load julia something in lisp folder
   #+begin_src elisp
(defadvice ess-indent-or-complete (after julia-latexsubs activate)
  (unless (use-region-p)
    (call-interactively 'julia-latexsub-or-indent)))
   #+end_src

   #+RESULTS:
   : ess-indent-or-complete

***** COMMENT System environment parameter.
   #+begin_src elisp
  (setenv "JULIA_HISTORY"  ".julia_history")
  (setenv "JULIA_ANSWER_COLOR" "blue")
  (setenv "JULIA_NUM_THREADS" "3")
   #+end_src

   #+RESULTS:
   : 3
***** COMMENT LSP Julia
   It requires julia> Pkg.add("LanguageServer")
   #+begin_src elisp
(use-package! lsp-julia ;; USE lsp!
  :after ess-julia
  :config
  (add-hook 'ess-julia-mode-hook #'lsp-mode))
   #+end_src

* Aggressive indent
:PROPERTIES:
:ARCHIVE_TIME: 2020-10-14 Wed 18:22
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp
(use-package! aggressive-indent
  :defer t
  :init
  (add-hook! 'emacs-startup-hook (global-aggressive-indent-mode +1)))
#+END_SRC


* Retrieving old undo
:PROPERTIES:
:ARCHIVE_TIME: 2020-10-14 Wed 19:44
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Doom stuff
:ARCHIVE_CATEGORY: MyConfig
:END:
#+begin_src elisp
(defun emacs-undo nil nil)
(global-set-key [remap emacs-undo] #'undo)
(add-hook! 'emacs-startup-hook (global-undo-tree-mode -1))
#+end_src

* COMMENT Tabnine
:PROPERTIES:
:ARCHIVE_TIME: 2020-11-29 dom 21:30
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes/Company
:ARCHIVE_CATEGORY: MyConfig
:END:
see [[https://github.com/TommyX12/company-tabnine][Tabnine]]
#+begin_src elisp
(use-package! company-tabnine
  :after company
  (add-to-list 'company-backends #'company-tabnine))

;; (after! company
;;   ;; Trigger completion immediately.
;;   (setq company-idle-delay 0
;;         company-show-numbers t)) ;; Number the candidates (use M-1, M-2 etc to select completions).
(setq company-minimum-prefix-length 2
      company-idle-delay 0.5
      company-show-numbers t)
#+end_src


* COMMENT Backends
:PROPERTIES:
:ARCHIVE_TIME: 2020-11-29 dom 21:31
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes/Company
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp
;; OPTIONAL, if `company-ispell-dictionary' is nil, `ispell-complete-word-dict' is used
;;  but I prefer hard code the dictionary path. That's more portable.
(when (file-exists-p "~/Dropbox/config/english-words.txt")
  (setq company-ispell-dictionary (file-truename "~/Dropbox/config/english-words.txt")))

;; https://emacs.stackexchange.com/questions/15246/how-add-company-dabbrev-to-the-company-completion-popup

(defun brust-generic-company-setup (-ll)
  (make-local-variable 'company-backends)
  (cl-loop for -add-backend in (reverse -ll) do
           (add-to-list 'company-backends `,-add-backend)))

(defun toggle-company-ispell nil
  (interactive)
  (cond
   ((memq 'company-ispell company-backends)
    (setq company-backends (delete 'company-ispell company-backends))
    (message "company-ispell disabled"))
   (t
    (add-to-list 'company-backends 'company-ispell t)
    (message "company-ispell enabled!"))))

(defun text-mode-hook-company-setup nil
  (brust-generic-company-setup '(company-ispell)))

(add-hook 'text-mode-hook #'text-mode-hook-company-setup)

(use-package company-shell
  :init
  (defun shell-mode-hook-company-setup nil
    (brust-generic-company-setup '((company-shell company-fish-shell))))
  (add-hook 'shell-mode-hook #'shell-mode-hook-company-setup))

;; (use-package company-math)
(use-package company-auctex
  :after auctex)
;; local configuration for TeX modes
(defun LaTeX-mode-hook-company-setup nil
  ;; (require 'dabbrev)
  (make-local-variable 'company-backends)
  (setq company-backends '((company-semantic company-files company-dabbrev-code company-dabbrev company-ispell)))
  (company-auctex-init))

;;    (brust-generic-company-setup
;;     '(;; company-auctex-labels
;;       ;; company-auctex-bibs
;;       (company-auctex-macros
;;        company-auctex-symbols
;;        company-auctex-environments
;;        ;; company-math-symbols-latex
;;        company-latex-commands))))

;; use numbers 0-9 to select company completion candidates (from abo-abo's config file.
;;   (let ((map company-active-map))
;;     (mapc (lambda (x) (define-key map (format "%d" x)
;;                         `(lambda nil (interactive) (company-complete-number ,x))))
;;           (number-sequence 0 9)))
)
#+END_SRC

* Dired
:PROPERTIES:
:ARCHIVE_TIME: 2020-11-29 dom 21:46
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Doom stuff
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp
;; (customize-set-variable 'diredp-hide-details-initially-flag nil)
;; (put 'dired-find-alternate-file 'disabled nil)
(setq ;; ls-lisp-dirs-first t
 ;; dired-ls-F-marks-symlinks t
 ;; delete-by-moving-to-trash t
 ;; wdired-allow-to-change-permissions t
 ;; “always” means no asking
 ;; “top” means ask once
 dired-recursive-deletes 'always
 ;; copy other frame
 ;; dired-x-hands-off-my-keys t
 ;; dired-hide-details-hide-information-lines t
 ;;
 xref-show-xrefs-function 'xref--show-xref-buffer
 )
 ;; (map! :map dired-mode-map :n "y" #'hydra-dired/body)
 ;; (use-package dired+)
#+END_SRC

#+RESULTS:

* COMMENT SAGE
:PROPERTIES:
:ARCHIVE_TIME: 2020-12-09 mié 04:23
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Programming
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp
  (use-package sage-shell-mode
    :init
    (setq sage-shell:sage-root "~/SageMath")
    :config
    ;; Run SageMath by M-x run-sage instead of M-x sage-shell:run-sage
    (sage-shell:define-alias)

    ;; Turn on eldoc-mode in Sage terminal and in Sage source files
    (add-hook 'sage-shell-mode-hook #'eldoc-mode)
    (add-hook 'sage-shell:sage-mode-hook #'eldoc-mode))
#+END_SRC

#+RESULTS:
: t


* COMMENT SASS files
:PROPERTIES:
:ARCHIVE_TIME: 2020-12-09 mié 04:23
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Programming
:ARCHIVE_CATEGORY: MyConfig
:END:
    For some reason turn-off aggressive-indent do not work :(
#+BEGIN_SRC elisp
  (use-package sass-mode
    :config
    (defun aggressive-indent-mode-off nil
      (aggressive-indent-mode -1))
    (setq scss-compile-at-save nil)
    (add-hook 'sass-mode-hook #'aggressive-indent-mode-off))
#+END_SRC

#+RESULTS:
: t


* COMMENT Help echo messages
:PROPERTIES:
:ARCHIVE_TIME: 2020-12-09 mié 04:23
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Doom stuff/Mode Line
:ARCHIVE_CATEGORY: MyConfig
:END:
#+begin_src elisp
;; Disable help mouse-overs for mode-line segments (i.e. :help-echo text).
;; They're generally unhelpful and only add confusing visual clutter.
(setq mode-line-default-help-echo nil
      show-help-function nil)
#+end_src

* COMMENT New paren
:PROPERTIES:
:ARCHIVE_TIME: 2021-02-27 sáb 23:06
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/My functions/Close<->open parents
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp

(defvar brust-open-paren-last 1 "Number corresponding to last inserted paren by `brust-open-paren-alist'")

(defvar brust-open-paren-alist '((1 . "(")
                                 (2 . "[")
                                 (3 . "{")
                                 (4 . "<"))
  "List with open paren to cycle through")

(defun brust-open-paren-insert (-paren)
  (insert (cdr (assoc (setq brust-last-open-paren -paren)
                      brust-open-paren-alist))))

(defun brust-open-paren-cycle (&optional args)
  (interactive "P")
  (if (string= (cdr (assoc brust-last-open-paren
                           brust-open-paren-alist))
               (buffer-substring-no-properties (1- (point)) (point)))
      (delete-char -1)
    (setq brust-open-paren-last 0))
  (brust-open-paren-insert
   (setq brust-open-paren-last
         (if (< brust-open-paren-last (length brust-open-paren-alist))
             (1+ brust-open-paren-last)
           1))))

(defun brust-open-paren-add-more nil
  "Copy previous char"
  (interactive)
  (insert (buffer-substring-no-properties (1- (point)) (point))))

(defun brust-open-paren-insert-backslash nil
  "Insert backslash before previous char"
  (interactive)
  (save-excursion
    (forward-char -1)
    (insert "\\")))

(defun brust-open-paren-leave-just-backslash nil
  (interactive)
  (delete-char -1)
  (insert "\\"))

(defun brust-open-paren-ordered-string-of-options nil
  (cl-loop for xx in brust-open-paren-alist
           concat (cdr xx)))

(defhydra brust-open-paren-hydra nil
  "

    ^ Open paren %(brust-open-paren-ordered-string-of-options): "
    ("SPC" (brust-open-paren-cycle) "Cycle")
    ("a" (brust-open-paren-add-more) "Add another")
    ("b" (brust-open-paren-insert-backslash) "Add backslash")
    ("q" (brust-open-paren-leave-just-backslash) "Just backslash"))
#+END_SRC

#+RESULTS:
: brust-open-paren-hydra/body


* COMMENT Ibuffer
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-04 dom 02:13
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes
:ARCHIVE_CATEGORY: MyConfig
:END:
#+BEGIN_SRC elisp
  (after! ibuffer
    (define-ibuffer-column lines-h
      (:name "nºLines" :inline t)
      ;;(set-buffer (buffer))
      (brust--number-of-lines-current-buffer))
      ;; (let ((n (line-number-at-pos (point-max))))
      ;;   (cond
      ;;    ((> n 1000000) (format "%7.1fM" (/ n 1000000.0)))
      ;;    ((> n 1000) (format "%7.1fk" (/ n 1000.0)))
      ;;    ;;((> n 100) (format "%7.1fh" (/ n 100.0)))
      ;;    (t (format "%8d" n)))))

    (setq ibuffer-formats
          ;; Modify the default ibuffer-formats (toggle with `)
          '((mark modified read-only vc-status-mini " "
                  (name 30 30 :left :elide)
                  " "
                  (lines-h 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  (vc-status 16 16 :left)
                  " "
                  filename-and-process)
            (mark " " (name 16 -1) " " filename)))

    ;; Switching to ibuffer puts the cursor on the most recent buffer
    (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
               "Open ibuffer with cursor pointed to most recent buffer name"
               (let ((recent-buffer-name (buffer-name)))
                 ad-do-it
                 (ibuffer-jump-to-buffer recent-buffer-name))))

#+END_SRC


* COMMENT Hydra
:PROPERTIES:
:ARCHIVE_TIME: 2021-04-04 dom 02:14
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes
:ARCHIVE_CATEGORY: MyConfig
:END:
** COMMENT mu4e
#+begin_src elisp
(defhydra hydra-mu4e-headers (:color blue :hint nil)
  "
 ^General^   | ^Search^           | _!_: read    | _#_: deferred  | ^Switches^
-^^----------+-^^-----------------| _?_: unread  | _%_: pattern   |-^^------------------
_n_: next    | _s_: search        | _r_: refile  | _&_: custom    | _O_: sorting
_p_: prev    | _S_: edit prev qry | _u_: unmk    | _+_: flag      | _P_: threading
_]_: n unred | _/_: narrow search | _U_: unmk *  | _-_: unflag    | _Q_: full-search
_[_: p unred | _b_: search bkmk   | _d_: trash   | _T_: thr       | _V_: skip dups
_y_: sw view | _B_: edit bkmk     | _D_: delete  | _t_: subthr    | _W_: include-related
_R_: reply   | _{_: previous qry  | _m_: move    |-^^-------------+-^^------------------
_C_: compose | _}_: next query    | _a_: action  | _|_: thru shl  | _`_: update, reindex
_F_: forward | _C-+_: show more   | _A_: mk4actn | _H_: help      | _;_: context-switch
_o_: org-cap | _C--_: show less   | _*_: *thing  | _q_: quit hdrs | _j_: jump2maildir "

  ;; general
  ("n" mu4e-headers-next)
  ("p" mu4e-headers-previous)
  ("[" mu4e-select-next-unread)
  ("]" mu4e-select-previous-unread)
  ("y" mu4e-select-other-view)
  ("R" mu4e-compose-reply)
  ("C" mu4e-compose-new)
  ("F" mu4e-compose-forward)
  ("o" my/org-capture-mu4e)                  ; differs from built-in

  ;; search
  ("s" mu4e-headers-search)
  ("S" mu4e-headers-search-edit)
  ("/" mu4e-headers-search-narrow)
  ("b" mu4e-headers-search-bookmark)
  ("B" mu4e-headers-search-bookmark-edit)
  ("{" mu4e-headers-query-prev)              ; differs from built-in
  ("}" mu4e-headers-query-next)              ; differs from built-in
  ("C-+" mu4e-headers-split-view-grow)
  ("C--" mu4e-headers-split-view-shrink)

  ;; mark stuff
  ("!" mu4e-headers-mark-for-read)
  ("?" mu4e-headers-mark-for-unread)
  ("r" mu4e-headers-mark-for-refile)
  ("u" mu4e-headers-mark-for-unmark)
  ("U" mu4e-mark-unmark-all)
  ("d" mu4e-headers-mark-for-trash)
  ("D" mu4e-headers-mark-for-delete)
  ("m" mu4e-headers-mark-for-move)
  ("a" mu4e-headers-action)                  ; not really a mark per-se
  ("A" mu4e-headers-mark-for-action)         ; differs from built-in
  ("*" mu4e-headers-mark-for-something)

  ("#" mu4e-mark-resolve-deferred-marks)
  ("%" mu4e-headers-mark-pattern)
  ("&" mu4e-headers-mark-custom)
  ("+" mu4e-headers-mark-for-flag)
  ("-" mu4e-headers-mark-for-unflag)
  ("t" mu4e-headers-mark-subthread)
  ("T" mu4e-headers-mark-thread)

  ;; miscellany
  ("q" mu4e~headers-quit-buffer)
  ("H" mu4e-display-manual)
  ("|" mu4e-view-pipe)                       ; does not seem built-in any longer

  ;; switches
  ("O" mu4e-headers-change-sorting)
  ("P" mu4e-headers-toggle-threading)
  ("Q" mu4e-headers-toggle-full-search)
  ("V" mu4e-headers-toggle-skip-duplicates)
  ("W" mu4e-headers-toggle-include-related)

  ;; more miscellany
  ("`" mu4e-update-mail-and-index)           ; differs from built-in
  (";" mu4e-context-switch)
  ("j" mu4e~headers-jump-to-maildir)

  ("." nil))
#+end_src

#+RESULTS:
: hydra-mu4e-headers/body

** Org block template
     https://github.com/abo-abo/hydra/wiki/Org-mode-block-templates
*** Hot expand defun
#+BEGIN_SRC elisp
(defun hot-expand (str &optional mod header)
  "Expand org block template.

    STR is a structure template string recognised by org like <s. MOD is a
    string with additional parameters to add the begin line of the
    structure element. HEADER string includes more parameters that are
    prepended to the element after the #+HEADERS: tag."
  (let ((-str (if mod (concat str " " mod) str)))
    (if (region-active-p)
        (let ((-str-region (buffer-substring (region-beginning) (region-end))))
          (when header
            (delete-region (region-beginning) (region-end))
            (deactivate-mark)
            (insert "#+HEADERS: " header "\n")
            (push-mark)
            (activate-mark t)
            (insert -str-region))
          (org-insert-structure-template -str))
      (when header (insert "#+HEADERS: " header "\n"))
      (org-insert-structure-template -str)
      (insert "\n")
      (backward-char 1))))

;; (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
;; (require 'org-tempo) ; Required from org 9 onwards for old template expansion
;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason

(defun brust-org< nil
  "Self insert command or expand hydra of org block templates
  at the beginning of a line
  or with region active."
  (interactive)
  (if (or (region-active-p) (looking-back "^"))
      (hydra-org-block-template/body)
    (self-insert-command 1)))
#+END_SRC

#+RESULTS:
: brust-org<

*** Hydra
#+BEGIN_SRC elisp
  (defhydra hydra-org-block-template (:color blue :hint nil)
    "
     _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
     _l_atex   _E_xample   _j_ulia         _i_ndex:
     _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
     _s_rc     _n_ote      _p_erl          _H_TML:
     _h_tml    _b_ash      plant_u_ml      _A_SCII:
    "
    ("s" (hot-expand "src"))
    ("E" (hot-expand "example"))
    ("q" (hot-expand "quote"))
    ("v" (hot-expand "<v"))
    ("n" (hot-expand "note"))
    ("c" (hot-expand "center"))
    ("l" (hot-expand "export latex"))
    ("h" (hot-expand "export html"))
    ("a" (hot-expand "export ascii"))
    ("L" (hot-expand "LaTeX"))
    ("i" (hot-expand "index"))
    ("e" (hot-expand "src" "elisp"))
    ("j" (hot-expand "src" "ess-julia :session *julia*"))
    ("b" (hot-expand "src" "bash"))
    ("p" (hot-expand "src" "perl"))
    ("u" (hot-expand "src" "plantuml :file CHANGE.png"))
    ("P" (hot-expand "src" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\""))
    ("I" (hot-expand "INCLUDE"))
    ("H" (hot-expand "HTML"))
    ("A" (hot-expand "ASCII"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))
#+END_SRC

#+RESULTS:
: hydra-org-block-template/body

** PdfTools
#+begin_src elisp
(defhydra hydra-pdftools (:color blue :hint nil)
        "
   ╭────────────┐
   │ PDF Tools │^ ^    ^ ^  ^ ^  Annotations  Search/Link   Do
   ╭────────────────────────────────────────────────────────────┐
    History:  ↑ _B_ ↓ _N_ ^ ^    [_al_] list    [_s_] search    [_u_] revert buffer
    Go to page: [_e_] ^ ^ ^ ^    [_am_] markup  [_o_] outline   [_i_] info
    Scale reset: [_0_] ^ ^ ^ ^   [_at_] text    [_F_] link      [_d_] dark mode
    Fit: [_P_], _H_ight, _W_idth [_ad_] delete  [_f_] search link

   --------------------------------------------------------------------------------
        "
        ;; ("\\" hydra-master/body "back")
        ;; ("<ESC>" nil "quit")
        ("al" pdf-annot-list-annotations)
        ("ad" pdf-annot-delete)
        ;; ("aa" pdf-annot-attachment-dired)
        ("am" pdf-annot-add-markup-annotation)
        ("at" pdf-annot-add-text-annotation)
        ;; ("y"  pdf-view-kill-ring-save)
        ("0" pdf-view-scale-reset)
        ("H" pdf-view-fit-height-to-window)
        ("W" pdf-view-fit-width-to-window)
        ("P" pdf-view-fit-page-to-window)
        ("d" pdf-view-dark-minor-mode)
        ;; ("b" pdf-view-set-slice-from-bounding-box)
        ;; ("r" pdf-view-reset-slice)
        ("e" pdf-view-goto-page)
        ("o" pdf-outline)
        ("s" pdf-occur)
        ("i" pdf-misc-display-metadata)
        ("u" pdf-view-revert-buffer)
        ("F" pdf-links-action-perfom)
        ("f" pdf-links-isearch-link)
        ("B" pdf-history-backward :color red)
        ("N" pdf-history-forward :color red)
        ("l" image-forward-hscroll :color red)
        ("h" image-backward-hscroll :color red))
#+end_src

#+RESULTS:
: hydra-pdftools/body


* COMMENT Smartparents
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-21 lun 00:31
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/Build-in modes
:ARCHIVE_CATEGORY: MyConfig
:END:
#+begin_src elisp
(setq sp-highlight-pair-overlay nil
      sp-highlight-wrap-overlay nil
      sp-highlight-wrap-tag-overlay nil)
#+end_src

* COMMENT Yassnippets
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-22 mar 12:45
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes
:ARCHIVE_CATEGORY: MyConfig
:END:
** jasnippets
#+begin_src elisp
;; for functions
(defun julia-split-args (arg-string)
  "Split a julia argument string into ((name, default)..) tuples"
  (mapcar (lambda (x)
             (split-string x "[[:blank:]]*=[[:blank:]]*" t))
          (split-string arg-string "[[:blank:]]*[,;][[:blank:]]*" t)))

(defun julia-args-to-docstring ()
  "return docstring format for the julia arguments in yas-text"
  (let* ((indent (concat "\n" (make-string (current-column) 32)))
         (args (julia-split-args yas-text))
         (max-len (if args (apply 'max (mapcar (lambda (x) (length (nth 0 x))) args)) 0))
         (formatted-args (mapconcat
                          (lambda (x)
                            (concat "- " (nth 0 x) (make-string (- max-len (length (nth 0 x))) ? ) " : "
                                    (if (nth 1 x) (concat "\(default " (nth 1 x) "\)"))))
                          args
                          indent)))
    (unless (string= formatted-args "")
      (mapconcat 'identity (list "# Arguments" formatted-args) indent))))
#+end_src


* COMMENT Surround
:PROPERTIES:
:ARCHIVE_TIME: 2022-02-23 mié 09:11
:ARCHIVE_FILE: ~/.doom.d/MyConfig.org
:ARCHIVE_OLPATH: init.el/External modes
:ARCHIVE_CATEGORY: MyConfig
:END:
#+begin_src elisp
(setq-default
 evil-surround-pairs-alist
 '((?\( . ("(" . ")"))
   (?\[ . ("[" . "]"))
   (?\{ . ("{" . "}"))
   (?< . ("<" . ">"))

   (?\) . ("\\(" . "\\)"))
   (?\] . ("\\[\n" . "\n\\]"))
   ;; (?\) . ("(" . ")"))
   ;; (?\] . ("[" . "]"))
   ;; (?\} . ("{" . "}"))

   ;; (?# . ("#{" . "}"))
   ;; (?b . ("(" . ")"))
   ;; (?B . ("{" . "}"))
   (?t . evil-surround-read-tag)
   (?> . evil-surround-read-tag)
   (?f . evil-surround-function)))

;; this macro was copied from here: https://stackoverflow.com/a/22418983/4921402
(defmacro define-and-bind-quoted-text-object (name key start-regex end-regex)
  (let ((inner-name (make-symbol (concat "evil-inner-" name)))
        (outer-name (make-symbol (concat "evil-a-" name))))
    `(progn
       (evil-define-text-object ,inner-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count nil))
       (evil-define-text-object ,outer-name (count &optional beg end type)
         (evil-select-paren ,start-regex ,end-regex beg end type count t))
       (define-key evil-inner-text-objects-map ,key #',inner-name)
       (define-key evil-outer-text-objects-map ,key #',outer-name))))

(define-and-bind-quoted-text-object "dollar" "$" "\\$" "\\$") ;; sometimes your have to escape the regex
(define-and-bind-quoted-text-object "ddollar" "r" "\\$\\$" "\\$\\$") ;; sometimes your have to escape the regex
(define-and-bind-quoted-text-object "inmath" ")" "\\\\(" "\\\\)")
(define-and-bind-quoted-text-object "dismath" "]" "\\\\[" "\\\\]")

(defun brust-embrace-LaTeX-mode-hook ()
  (dolist (lst '((?= "\\verb|" . "|")
                 (?~ "\\texttt{" . "}")
                 (?/ "\\emph{" . "}")
                 (?* "\\textbf{" . "}")))
    (embrace-add-pair (car lst) (cadr lst) (cddr lst))))
#+end_src

#+RESULTS:
: brust-embrace-LaTeX-mode-hook

